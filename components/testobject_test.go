package components

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"sigs.k8s.io/controller-runtime/pkg/scheme"

	"github.com/coderanger/controller-utils/conditions"
)

var TestObjectSchemeBuilder = &scheme.Builder{GroupVersion: schema.GroupVersion{Group: "test.coderanger.net", Version: "v1"}}

// Declare a test type as the root object for these tests.
type TestObjectSpec struct {
	Field string `json:"field,omitempty"`
}

type TestObjectStatus struct {
	Conditions []conditions.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"`
}

// +kubebuilder:object:root=true

type TestObject struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   TestObjectSpec   `json:"spec,omitempty"`
	Status TestObjectStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

type TestObjectList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TestObject `json:"items"`
}

func (o *TestObject) GetConditions() *[]conditions.Condition {
	return &o.Status.Conditions
}
func init() {
	TestObjectSchemeBuilder.Register(&TestObject{}, &TestObjectList{})
}

// Auto-generated deppcopy goop.
// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TestObject) DeepCopyInto(out *TestObject) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	out.Spec = in.Spec
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TestObject.
func (in *TestObject) DeepCopy() *TestObject {
	if in == nil {
		return nil
	}
	out := new(TestObject)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *TestObject) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TestObjectList) DeepCopyInto(out *TestObjectList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]TestObject, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TestObjectList.
func (in *TestObjectList) DeepCopy() *TestObjectList {
	if in == nil {
		return nil
	}
	out := new(TestObjectList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *TestObjectList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TestObjectSpec) DeepCopyInto(out *TestObjectSpec) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TestObjectSpec.
func (in *TestObjectSpec) DeepCopy() *TestObjectSpec {
	if in == nil {
		return nil
	}
	out := new(TestObjectSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TestObjectStatus) DeepCopyInto(out *TestObjectStatus) {
	*out = *in
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]conditions.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TestObjectStatus.
func (in *TestObjectStatus) DeepCopy() *TestObjectStatus {
	if in == nil {
		return nil
	}
	out := new(TestObjectStatus)
	in.DeepCopyInto(out)
	return out
}
